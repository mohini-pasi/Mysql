-- PRACTICE QUESTION 1
CREATE DATABASE xyz;
USE xyz;
CREATE TABLE employee (
ID INT PRIMARY KEY,
NAME VARCHAR(50),
SALARY INT );

INSERT INTO employee 
VALUES 
(1,"ADAM",25000),
(2,"BOB",30000),
(3,"casey",40000);

SELECT * FROM employee;
CREATE TABLE temp(
emp_id INT,
foreign key (emp_id) references employee(ID));

SELECT * FROM temp;
SELECT * FROM employee;

-- ----------------------------------------------

CREATE TABLE COLLEGE
(ROLL_NO INT PRIMARY KEY,
NAME VARCHAR(50),
MARKS INT NOT NULL,
GRADE VARCHAR(1),
CITY VARCHAR(20));

INSERT INTO COLLEGE
VALUES
(1,"ANIL",78,"C","PUNE"),
(2,"BHUMIKA",93,"A","MUMBAI"),
(3,"CHETAN",85,"B","MUMBAI"),
(4,"DHRUV",96,"A","DELHI"),
(5,"EMANUEL",12,"F","DELHI"),
(6,"FARAH",82,"B","DELHI");

SELECT MARKS,NAME FROM COLLEGE;
SELECT * FROM COLLEGE;
SELECT distinct CITY FROM COLLEGE;

-- WHERE CLAUSE AND OPERATOR
SELECT * FROM COLLEGE WHERE MARKS > 80;
SELECT * FROM COLLEGE WHERE MARKS > 80 AND CITY = "MUMBAI";
SELECT * FROM COLLEGE WHERE MARKS+10 > 100 AND CITY = "MUMBAI";
SELECT * FROM COLLEGE WHERE MARKS > 80 AND CITY != "MUMBAI";
SELECT * FROM COLLEGE WHERE MARKS  BETWEEN 80 AND 90;
SELECT * FROM COLLEGE WHERE CITY IN ("MUMBAI","DELHI"); -- PASS A LIST
SELECT * FROM COLLEGE WHERE MARKS IN (60,70,93);
SELECT * FROM COLLEGE WHERE CITY NOT IN ("DELHI","GOA"); 
SELECT * FROM COLLEGE  LIMIT 3 ;
SELECT * FROM COLLEGE WHERE CITY = "MUMBAI" LIMIT 2;
SELECT * FROM COLLEGE ORDER BY NAME;
SELECT * FROM COLLEGE ORDER BY NAME LIMIT 5;
SELECT * FROM COLLEGE ORDER BY NAME DESC LIMIT 5;

-- AGGREGATE FUNCTION
-- PERFORM CALCULATION ON SET OF VALUE AND RETURN SINGLE value
 SELECT COUNT(MARKS) FROM COLLEGE;
 SELECT COUNT(NAME) FROM COLLEGE;
 SELECT COUNT(CITY) FROM COLLEGE;
 SELECT COUNT(ROLL_NO) FROM COLLEGE;

SELECT MAX(MARKS) FROM COLLEGE;
SELECT MAX(NAME) FROM COLLEGE;
SELECT MAX(CITY) FROM COLLEGE; 
SELECT MAX(ROLL_NO) FROM COLLEGE;

SELECT AVG(MARKS) FROM COLLEGE;
SELECT AVG(NAME) FROM COLLEGE;-- TEXT MAI 0 AAYEGA OUTPUT
SELECT AVG(CITY) FROM COLLEGE;
SELECT AVG(ROLL_NO) FROM COLLEGE;

SELECT MIN(MARKS) FROM COLLEGE;
SELECT MIN(NAME) FROM COLLEGE; 
SELECT MIN(CITY) FROM COLLEGE;
SELECT MIN(ROLL_NO) FROM COLLEGE;

-- GROUP BY CLAUSE 
-- WE USE GROUP BY WITH AGG 
-- IT GROUP ROWS THAT HAVE THE SAME VALUES INTO SUMMARY ROWS

SELECT CITY ,COUNT(NAME) FROM COLLEGE GROUP BY CITY;
SELECT MARKS,ROLL_NO,COUNT(NAME) FROM COLLEGE GROUP BY MARKS,ROLL_NO;
SELECT CITY ,AVG(MARKS) FROM COLLEGE GROUP BY CITY;
SELECT CITY,AVG(MARKS) FROM COLLEGE GROUP BY CITY ORDER BY CITY ;
SELECT GRADE,COUNT(ROLL_NO) FROM COLLEGE GROUP BY GRADE ORDER BY GRADE;
SELECT GRADE,COUNT(MARKS) FROM COLLEGE GROUP BY GRADE ORDER BY GRADE;
SELECT * FROM COLLEGE;

-- HAVING CLAUSE
-- USE FOR ADDING CONDITION ON GROUP BY
SELECT CITY, COUNT(NAME) FROM COLLEGE GROUP BY CITY;
SELECT CITY,MARKS ,COUNT(NAME) FROM COLLEGE GROUP BY CITY,MARKS HAVING MARKS > 90;
SELECT COUNT(NAME),CITY FROM COLLEGE GROUP BY CITY HAVING MAX(MARKS) > 90;

-- WHERE AND HAVING
SELECT CITY FROM COLLEGE WHERE GRADE = "A" GROUP BY CITY HAVING AVG(MARKS)>90;

-- UPDATE
SELECT * FROM COLLEGE;
UPDATE COLLEGE
SET NAME= "MOHINI"
WHERE NAME = "DHRUV";
SELECT * FROM COLLEGE;

-- 0 OFF SAFE MODE, 1 MEANS ON
SET SQL_SAFE_UPDATES=0;

UPDATE COLLEGE 
SET GRADE = "B"
WHERE MARKS BETWEEN 70 AND 90;
SELECT * FROM COLLEGE;

UPDATE COLLEGE departments
SET GRADE = "C"
WHERE MARKS BETWEEN 60 AND 70;
SELECT * FROM COLLEGE;

UPDATE COLLEGE 
SET GRADE = "D"
WHERE MARKS BETWEEN 40 AND 60;
SELECT * FROM COLLEGE;

UPDATE COLLEGE 
SET GRADE = "F"
WHERE MARKS BETWEEN 1 AND 40;
SELECT * FROM COLLEGE;

UPDATE COLLEGE
SET MARKS = 50
WHERE MARKS = 82;
SELECT * FROM COLLEGE;

UPDATE COLLEGE
SET MARKS = 65
WHERE MARKS = 85;
SELECT * FROM COLLEGE;

UPDATE COLLEGE
SET MARKS = MARKS + 1;
SELECT * FROM COLLEGE;

-- DELETE

DELETE FROM COLLEGE WHERE MARKS < 15;
SELECT * FROM COLLEGE;

-- FK
USE XYZ;
CREATE TABLE DEPT
(ID INT PRIMARY KEY,
NAME VARCHAR(50));
INSERT INTO DEPT VALUES (101 , "ENGLISH"),(102,"IT");

UPDATE DEPT
SET ID = 111
WHERE ID = 101;
SELECT * FROM DEPT;


-- cascading for fk 
-- koi bhi update ya delete hum parents mai kare to child mai bhi ho
CREATE TABLE TEACHER (
ID INT PRIMARY KEY,
NAME VARCHAR(50),
DEPT_ID INT,
foreign key (DEPT_ID) references DEPT(ID)
ON UPDATE cascade
ON DELETE cascade);

INSERT INTO TEACHER VALUES (101,"ADAM",101),(102,"EVE","102");
SELECT * FROM TEACHER;


-- ALTER USED TO CHANGE SCHEMAS (DESGIN) 
-- USED TO ADD A COLUMN , DROP COLUMN , RENAME COLUMN , MODIFY , CHANGE
SELECT * FROM COLLEGE;

ALTER TABLE COLLEGE ADD COLUMN AGE INT;

ALTER TABLE COLLEGE DROP COLUMN AGE ;

ALTER TABLE COLLEGE RENAME TO STD;

SELECT * FROM STD;

ALTER TABLE STD ADD COLUMN AGE INT;
ALTER TABLE STD MODIFY COLUMN AGE VARCHAR(2);
INSERT INTO STD (MARKS,ROLL_NO,AGE) VALUES (77,7,11);
INSERT INTO STD (MARKS,ROLL_NO,AGE) VALUES (78,8,100); -- ERROR VARCHAR IS 2 VALUE IS 100
SELECT * FROM STD;

ALTER TABLE STD CHANGE COLUMN AGE STU_AGE INT;
INSERT INTO STD (MARKS,ROLL_NO,STU_AGE) VALUES (78,8,100);

ALTER TABLE STD
DROP COLUMN STU_AGE;

-- TRUNCATE DELETE TABLE DATA 
-- DROP DELETE TABLE

truncate TABLE STD;
ALTER TABLE STD
RENAME COLLEGE;
SELECT * FROM COLLEGE;

ALTER TABLE COLLEGE
RENAME COLUMN NAME TO FULL_NAME;

ALTER TABLE COLLEGE
CHANGE NAMR NAME VARCHAR(50);


ALTER TABLE COLLEGE
DROP COLUMN GRADE;

DELETE FROM COLLEGE 
WHERE MARKS <80 ;

SET SQL_SAFE_UPDATES = 0;
SELECT * FROM COLLEGE;

-- JOINS
-- USED TO COMBINE A ROWS FROM TWO OR MORE TABLE

-- INNER JOIN -- COMMON DATA IN BOTH
USE XYZ;
DROP TABLE STU;
DROP TABLE COU;
CREATE TABLE STU(
ID INT ,
NAME VARCHAR(50));
INSERT INTO STU VALUES (1,"MOHINI"),(2,"SHISHIR"),(4,"POOJA");

CREATE TABLE COU(
ID INT ,
COU VARCHAR(50));
INSERT INTO COU VALUES(1,"DS"),(2,"PY"),(3,"DJ");
SELECT * FROM STU INNER JOIN COU ON STU.ID = COU.ID;
SELECT * FROM STU AS S INNER JOIN COU AS C ON S.ID = C.ID;
-- LEFT JOIN -- 
SELECT * FROM STU LEFT JOIN COU ON STU.ID = COU.ID;
-- RIGHT JOIN
SELECT * FROM STU RIGHT JOIN COU ON STU.ID = COU.ID;

-- FULL JOIN
-- MYSQL MAI FULL JOIN WORD USE NHI KARTE USED TO RETURN ALL MATCH VALUE FROM BOTH THE TABLE
-- USE UNION IN MYSQL FOR INDIRECTLY USING FULL JOIN
SELECT * FROM STU AS S LEFT JOIN COU AS C ON S.ID = C.ID
UNION
SELECT * FROM STU AS S RIGHT JOIN COU AS C ON S.ID = C.ID;

-- LEFT EXCLUSIVE & RIGHT EXCLUSIVE
SELECT * FROM STU AS S LEFT JOIN COU AS C ON S.ID = C.ID;
SELECT * FROM STU AS S LEFT JOIN COU AS C ON S.ID = C.ID WHERE C.ID IS NOT NULL;
SELECT * FROM STU AS S LEFT JOIN COU AS C ON S.ID = C.ID WHERE C.ID IS NULL; -- RIGHT

SELECT * FROM STU AS S RIGHT JOIN COU AS C ON S.ID = C.ID;
SELECT * FROM STU AS S RIGHT JOIN COU AS C ON S.ID = C.ID WHERE S.ID IS NOT NULL;
SELECT * FROM STU AS S RIGHT JOIN COU AS C ON S.ID = C.ID WHERE S.ID IS NULL; -- RIGHT

-- FULL EXCLUSIVE JOIN
SELECT * FROM STU AS S LEFT JOIN COU AS C ON S.ID = C.ID WHERE C.ID IS NULL
UNION 
SELECT * FROM STU AS S RIGHT JOIN COU AS C ON S.ID = C.ID WHERE S.ID IS NULL;

-- SELF JOIN
DROP TABLE EMP;
CREATE TABLE EMP(
ID INT,
NAME VARCHAR(50),
M_ID INT);
INSERT INTO EMP VALUES (1,"ADAM",3),(2,"BOB",4);
INSERT INTO EMP (ID,NAME) VALUES (3,"CASEY" );
INSERT INTO EMP VALUES(4,"DONALD",3);

SELECT * FROM EMP AS A JOIN EMP AS B ON A.ID = B.M_ID;
SELECT A.NAME AS M_NAME , B.NAME FROM EMP AS A JOIN EMP AS B ON A.ID = B.M_ID;

-- UNION
-- USED TO  COMBINE TWO OR MORE SELECT STATEMENTS AND GIVE UNIQUE RECORD
SELECT NAME FROM EMP
UNION 
SELECT NAME FROM EMP;

-- UNION ALL
-- USED TO  COMBINE TWO OR MORE SELECT STATEMENTS AND GIVE DUPLICATE RECORD ALSO
SELECT NAME FROM EMP
UNION  ALL
SELECT NAME FROM EMP;

-- SQL SUB QUERIES/ INNER QUERIES / QUERIES
-- IS THE QUERIES IN THE ANOTHER SQL QUERIES
-- INVOLVES 2 STATEMENT SELECT ,FROM AND WHERE
SELECT * FROM COLLEGE;
SELECT AVG(MARKS) FROM COLLEGE;

SELECT NAME ,MARKS FROM COLLEGE WHERE MARKS > 89.0000;

-- SUB QUERY -- ITS DYNAMIC
SELECT NAME,MARKS FROM COLLEGE WHERE MARKS > (SELECT AVG(MARKS) FROM COLLEGE);

SELECT NAME,ROLL_NO FROM COLLEGE WHERE ROLL_NO % 2 = 0;
SELECT NAME , ROLL_NO FROM COLLEGE WHERE ROLL_NO IN (SELECT ROLL_NO FROM COLLEGE WHERE ROLL_NO % 2 = 0);

-- VIEWS
-- A VIEW IS A VIRTUAL TABLE BASED ON THE RESULT SET OF SQL STATEMENT
-- PAYMENT CARD  
CREATE VIEW VIEW1 AS SELECT ROLL_NO,NAME,MARKS FROM COLLEGE;
SELECT * FROM VIEW1;
DROP VIEW VIEW1;

-- MYSQL 500 Practice Queries
-- Database Creation
CREATE DATABASE IF NOT EXISTS XYZ;
USE XYZ;

-- TABLES CREATION
-- EMPLOYEE Table
CREATE TABLE IF NOT EXISTS EMPLOYEE (
    ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    SALARY INT
);

-- DEPARTMENT Table
CREATE TABLE IF NOT EXISTS DEPT (
    ID INT PRIMARY KEY,
    NAME VARCHAR(50)
);

-- TEACHER Table
CREATE TABLE IF NOT EXISTS TEACHER (
    ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    DEPT_ID INT,
    FOREIGN KEY (DEPT_ID) REFERENCES DEPT(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- COLLEGE Table
CREATE TABLE IF NOT EXISTS COLLEGE (
    ROLL_NO INT PRIMARY KEY,
    FULL_NAME VARCHAR(50),
    MARKS INT NOT NULL,
    CITY VARCHAR(20)
);

-- STUDENT Table
CREATE TABLE IF NOT EXISTS STUDENT (
    STU_ID INT PRIMARY KEY,
    STU_NAME VARCHAR(50),
    COURSE_ID INT
);

-- COURSE Table
CREATE TABLE IF NOT EXISTS COURSE (
    COURSE_ID INT PRIMARY KEY,
    COURSE_NAME VARCHAR(50)
);

-- SALES Table
CREATE TABLE IF NOT EXISTS SALES (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT,
    PRODUCT_NAME VARCHAR(50),
    AMOUNT DECIMAL(10,2)
);

-- CUSTOMER Table
CREATE TABLE IF NOT EXISTS CUSTOMER (
    CUSTOMER_ID INT PRIMARY KEY,
    CUSTOMER_NAME VARCHAR(50),
    CITY VARCHAR(20)
);

-- --------------------------------------
-- INSERT SAMPLE DATA
INSERT INTO EMPLOYEE VALUES (1,'ADAM',25000),(2,'BOB',30000),(3,'CASEY',40000);
INSERT INTO DEPT VALUES (101,'ENGLISH'),(102,'IT');
INSERT INTO TEACHER VALUES (1,'ADAM',101),(2,'EVE',102);
INSERT INTO COLLEGE VALUES (1,'ANIL',78,'PUNE'),(2,'BHUMIKA',93,'MUMBAI'),(3,'CHETAN',85,'MUMBAI');
INSERT INTO COURSE VALUES (1,'Python'),(2,'Data Science');
INSERT INTO STUDENT VALUES (1,'MOHINI',1),(2,'SHISHIR',2);
INSERT INTO CUSTOMER VALUES (1,'RAJ','MUMBAI'),(2,'RIYA','DELHI');
INSERT INTO SALES VALUES (1,1,'Laptop',50000),(2,2,'Mobile',20000);

-- --------------------------------------
-- BASIC SELECT QUERIES
SELECT * FROM EMPLOYEE;
SELECT * FROM DEPT;
SELECT * FROM TEACHER;
SELECT * FROM COLLEGE;
SELECT * FROM STUDENT;
SELECT * FROM COURSE;
SELECT * FROM CUSTOMER;
SELECT * FROM SALES;

-- DISTINCT
SELECT DISTINCT CITY FROM COLLEGE;
SELECT DISTINCT COURSE_ID FROM STUDENT;

-- WHERE CLAUSE
SELECT * FROM EMPLOYEE WHERE SALARY > 25000;
SELECT * FROM COLLEGE WHERE MARKS BETWEEN 80 AND 90;
SELECT * FROM STUDENT WHERE COURSE_ID = 1;
SELECT * FROM CUSTOMER WHERE CITY IN ('MUMBAI','DELHI');

-- AGGREGATE FUNCTIONS
SELECT COUNT(*) FROM EMPLOYEE;
SELECT SUM(SALARY) FROM EMPLOYEE;
SELECT AVG(MARKS) FROM COLLEGE;
SELECT MAX(SALARY) FROM EMPLOYEE;
SELECT MIN(MARKS) FROM COLLEGE;

-- GROUP BY
SELECT CITY, COUNT(FULL_NAME) FROM COLLEGE GROUP BY CITY;
SELECT COURSE_ID, COUNT(STU_ID) FROM STUDENT GROUP BY COURSE_ID;

-- HAVING
SELECT CITY, AVG(MARKS) FROM COLLEGE GROUP BY CITY HAVING AVG(MARKS) > 80;

-- UPDATE
UPDATE EMPLOYEE SET SALARY = SALARY + 1000 WHERE ID = 1;
UPDATE COLLEGE SET MARKS = MARKS + 5 WHERE MARKS < 90;

-- DELETE
DELETE FROM STUDENT WHERE STU_ID = 2;

-- ALTER TABLE
ALTER TABLE COLLEGE ADD COLUMN AGE INT;
ALTER TABLE COLLEGE DROP COLUMN AGE;
ALTER TABLE COLLEGE RENAME COLUMN FULL_NAME TO NAME;

-- INNER JOIN
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E INNER JOIN DEPT D ON E.ID = D.ID;
-- LEFT JOIN
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E LEFT JOIN DEPT D ON E.ID = D.ID;
-- RIGHT JOIN
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E RIGHT JOIN DEPT D ON E.ID = D.ID;
-- FULL JOIN using UNION
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E LEFT JOIN DEPT D ON E.ID = D.ID
UNION
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E RIGHT JOIN DEPT D ON E.ID = D.ID;

-- SELF JOIN
SELECT A.NAME AS MANAGER, B.NAME AS EMPLOYEE FROM EMPLOYEE A JOIN EMPLOYEE B ON A.ID = B.ID;

-- SUBQUERIES
SELECT NAME FROM EMPLOYEE WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEE);
SELECT NAME FROM STUDENT WHERE COURSE_ID IN (SELECT COURSE_ID FROM COURSE WHERE COURSE_NAME = 'Python');

-- VIEWS
CREATE VIEW EMP_VIEW AS SELECT NAME, SALARY FROM EMPLOYEE;
SELECT * FROM EMP_VIEW;
DROP VIEW EMP_VIEW;

-- UNION / UNION ALL
SELECT NAME FROM EMPLOYEE
UNION
SELECT NAME FROM STUDENT;

SELECT NAME FROM EMPLOYEE
UNION ALL
SELECT NAME FROM STUDENT;

-- MYSQL 500+ Solved Practice Queries (Complete Version)
-- Database: XYZ
USE XYZ;

-- ========================================
-- 1. EMPLOYEE TABLE QUERIES
CREATE TABLE IF NOT EXISTS EMPLOYEE (ID INT PRIMARY KEY, NAME VARCHAR(50), SALARY INT);
INSERT INTO EMPLOYEE VALUES (1,'ADAM',25000),(2,'BOB',30000),(3,'CASEY',40000),(4,'DONALD',45000),(5,'ELLA',35000),(6,'FIONA',28000),(7,'GEORGE',32000),(8,'HANNAH',36000),(9,'IVAN',41000),(10,'JANE',39000);
SELECT * FROM EMPLOYEE;
SELECT NAME FROM EMPLOYEE;
SELECT DISTINCT SALARY FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE SALARY > 30000;
SELECT * FROM EMPLOYEE WHERE NAME LIKE 'A%';
SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 30000 AND 45000;
SELECT * FROM EMPLOYEE ORDER BY SALARY DESC;
SELECT * FROM EMPLOYEE ORDER BY NAME ASC LIMIT 5;
SELECT COUNT(*) AS TOTAL_EMP FROM EMPLOYEE;
SELECT SUM(SALARY) AS TOTAL_SALARY FROM EMPLOYEE;
SELECT AVG(SALARY) AS AVG_SALARY FROM EMPLOYEE;
SELECT MAX(SALARY) AS MAX_SALARY FROM EMPLOYEE;
SELECT MIN(SALARY) AS MIN_SALARY FROM EMPLOYEE;
UPDATE EMPLOYEE SET SALARY = SALARY + 1000 WHERE ID = 1;
UPDATE EMPLOYEE SET SALARY = SALARY * 1.05;
DELETE FROM EMPLOYEE WHERE SALARY < 28000;
SELECT * FROM EMPLOYEE;

-- Self Join
SELECT A.NAME AS MANAGER, B.NAME AS EMPLOYEE FROM EMPLOYEE A JOIN EMPLOYEE B ON A.ID = B.ID;

-- ========================================
-- 2. DEPT TABLE QUERIES
CREATE TABLE IF NOT EXISTS DEPT (ID INT PRIMARY KEY, NAME VARCHAR(50));
INSERT INTO DEPT VALUES (101,'ENGLISH'),(102,'IT'),(103,'HR'),(104,'MARKETING'),(105,'FINANCE');
SELECT * FROM DEPT;
SELECT NAME FROM DEPT;
SELECT COUNT(*) FROM DEPT;
UPDATE DEPT SET NAME='HUMAN RESOURCES' WHERE ID=103;
DELETE FROM DEPT WHERE ID=101;

-- ========================================
-- 3. TEACHER TABLE QUERIES
CREATE TABLE IF NOT EXISTS TEACHER (ID INT PRIMARY KEY, NAME VARCHAR(50), DEPT_ID INT, FOREIGN KEY (DEPT_ID) REFERENCES DEPT(ID) ON UPDATE CASCADE ON DELETE CASCADE);
INSERT INTO TEACHER VALUES (1,'ADAM',102),(2,'EVE',102),(3,'FARAH',103),(4,'GEORGE',104),(5,'HANNAH',105);
SELECT * FROM TEACHER;
SELECT T.NAME, D.NAME AS DEPT_NAME FROM TEACHER T INNER JOIN DEPT D ON T.DEPT_ID = D.ID;
SELECT T.NAME, D.NAME AS DEPT_NAME FROM TEACHER T LEFT JOIN DEPT D ON T.DEPT_ID = D.ID;
SELECT COUNT(*) FROM TEACHER;
UPDATE TEACHER SET NAME='EVELYN' WHERE ID=2;
DELETE FROM TEACHER WHERE ID=5;

-- ========================================
-- 4. COLLEGE TABLE QUERIES
CREATE TABLE IF NOT EXISTS COLLEGE (ROLL_NO INT PRIMARY KEY, FULL_NAME VARCHAR(50), MARKS INT NOT NULL, CITY VARCHAR(20));
INSERT INTO COLLEGE VALUES (1,'ANIL',78,'PUNE'),(2,'BHUMIKA',93,'MUMBAI'),(3,'CHETAN',85,'MUMBAI'),(4,'DHRUV',96,'DELHI'),(5,'EMANUEL',12,'DELHI'),(6,'FARAH',82,'DELHI'),(7,'GOPAL',88,'PUNE'),(8,'HEMANT',75,'MUMBAI');
SELECT * FROM COLLEGE;
SELECT FULL_NAME, MARKS FROM COLLEGE WHERE MARKS>80;
SELECT CITY, COUNT(*) FROM COLLEGE GROUP BY CITY;
SELECT AVG(MARKS) FROM COLLEGE;
SELECT MAX(MARKS), MIN(MARKS) FROM COLLEGE;
UPDATE COLLEGE SET MARKS=MARKS+5 WHERE CITY='DELHI';
DELETE FROM COLLEGE WHERE MARKS<15;

-- ========================================
-- 5. STUDENT TABLE QUERIES
CREATE TABLE IF NOT EXISTS STUDENT (STU_ID INT PRIMARY KEY, STU_NAME VARCHAR(50), COURSE_ID INT);
INSERT INTO STUDENT VALUES (1,'MOHINI',1),(2,'SHISHIR',2),(3,'POOJA',1),(4,'RAHUL',2),(5,'RINA',3),(6,'TOM',1);
SELECT * FROM STUDENT;
SELECT STU_NAME FROM STUDENT WHERE COURSE_ID=1;
SELECT COUNT(*) FROM STUDENT;
UPDATE STUDENT SET STU_NAME='MOHINI PASI' WHERE STU_ID=1;
DELETE FROM STUDENT WHERE STU_ID=6;

-- ========================================
-- 6. COURSE TABLE QUERIES
CREATE TABLE IF NOT EXISTS COURSE (COURSE_ID INT PRIMARY KEY, COURSE_NAME VARCHAR(50));
INSERT INTO COURSE VALUES (1,'Python'),(2,'Data Science'),(3,'SQL'),(4,'Machine Learning');
SELECT * FROM COURSE;
SELECT COURSE_NAME FROM COURSE;
SELECT COUNT(*) FROM COURSE;
UPDATE COURSE SET COURSE_NAME='Deep Learning' WHERE COURSE_ID=4;
DELETE FROM COURSE WHERE COURSE_ID=3;

-- ========================================
-- 7. SALES TABLE QUERIES
CREATE TABLE IF NOT EXISTS SALES (ORDER_ID INT PRIMARY KEY, CUSTOMER_ID INT, PRODUCT_NAME VARCHAR(50), AMOUNT DECIMAL(10,2));
INSERT INTO SALES VALUES (1,1,'Laptop',50000),(2,2,'Mobile',20000),(3,1,'Monitor',15000),(4,3,'Keyboard',5000),(5,2,'Mouse',1500);
SELECT * FROM SALES;
SELECT PRODUCT_NAME, AMOUNT FROM SALES WHERE AMOUNT>20000;
SELECT SUM(AMOUNT) FROM SALES;
SELECT AVG(AMOUNT) FROM SALES;
UPDATE SALES SET AMOUNT=AMOUNT+1000 WHERE ORDER_ID=2;
DELETE FROM SALES WHERE AMOUNT<2000;

-- ========================================
-- 8. CUSTOMER TABLE QUERIES
CREATE TABLE IF NOT EXISTS CUSTOMER (CUSTOMER_ID INT PRIMARY KEY, CUSTOMER_NAME VARCHAR(50), CITY VARCHAR(20));
INSERT INTO CUSTOMER VALUES (1,'RAJ','MUMBAI'),(2,'RIYA','DELHI'),(3,'AMAN','PUNE'),(4,'SIMRAN','BANGALORE');
SELECT * FROM CUSTOMER;
SELECT CUSTOMER_NAME FROM CUSTOMER WHERE CITY='MUMBAI';
SELECT COUNT(*) FROM CUSTOMER;
UPDATE CUSTOMER SET CITY='HYDERABAD' WHERE CUSTOMER_ID=3;
DELETE FROM CUSTOMER WHERE CUSTOMER_ID=2;

-- ========================================
-- 9. JOINS, UNION, SUBQUERIES, VIEWS
SELECT S.STU_NAME, C.COURSE_NAME FROM STUDENT S INNER JOIN COURSE C ON S.COURSE_ID=C.COURSE_ID;
SELECT S.STU_NAME, C.COURSE_NAME FROM STUDENT S LEFT JOIN COURSE C ON S.COURSE_ID=C.COURSE_ID;
SELECT NAME FROM EMPLOYEE
UNION ALL
SELECT STU_NAME FROM STUDENT;
SELECT STU_NAME FROM STUDENT WHERE COURSE_ID IN (SELECT COURSE_ID FROM COURSE WHERE COURSE_NAME='Python');
CREATE VIEW STUDENT_VIEW AS SELECT STU_NAME, COURSE_ID FROM STUDENT;
SELECT * FROM STUDENT_VIEW;
DROP VIEW STUDENT_VIEW;

-- ========================================
-- DATABASE CREATION
CREATE DATABASE IF NOT EXISTS XYZ;
USE XYZ;

-- ========================================
-- TABLE CREATION

-- EMPLOYEE TABLE
CREATE TABLE IF NOT EXISTS EMPLOYEE (
    ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    SALARY INT
);

-- DEPARTMENT TABLE
CREATE TABLE IF NOT EXISTS DEPT (
    ID INT PRIMARY KEY,
    NAME VARCHAR(50)
);

-- TEACHER TABLE
CREATE TABLE IF NOT EXISTS TEACHER (
    ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    DEPT_ID INT,
    FOREIGN KEY (DEPT_ID) REFERENCES DEPT(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- COLLEGE TABLE
CREATE TABLE IF NOT EXISTS COLLEGE (
    ROLL_NO INT PRIMARY KEY,
    FULL_NAME VARCHAR(50),
    MARKS INT NOT NULL,
    CITY VARCHAR(20)
);

-- STUDENT TABLE
CREATE TABLE IF NOT EXISTS STUDENT (
    STU_ID INT PRIMARY KEY,
    STU_NAME VARCHAR(50),
    COURSE_ID INT
);

-- COURSE TABLE
CREATE TABLE IF NOT EXISTS COURSE (
    COURSE_ID INT PRIMARY KEY,
    COURSE_NAME VARCHAR(50)
);

-- SALES TABLE
CREATE TABLE IF NOT EXISTS SALES (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT,
    PRODUCT_NAME VARCHAR(50),
    AMOUNT DECIMAL(10,2)
);

-- CUSTOMER TABLE
CREATE TABLE IF NOT EXISTS CUSTOMER (
    CUSTOMER_ID INT PRIMARY KEY,
    CUSTOMER_NAME VARCHAR(50),
    CITY VARCHAR(20)
);

-- ========================================
-- INSERT SAMPLE DATA

-- EMPLOYEE
INSERT INTO EMPLOYEE VALUES 
(1,'ADAM',25000),(2,'BOB',30000),(3,'CASEY',40000),(4,'DONALD',45000),(5,'ELLA',35000),
(6,'FIONA',28000),(7,'GEORGE',32000),(8,'HANNAH',36000),(9,'IVAN',41000),(10,'JANE',39000);

-- DEPT
INSERT INTO DEPT VALUES 
(101,'ENGLISH'),(102,'IT'),(103,'HR'),(104,'MARKETING'),(105,'FINANCE');

-- TEACHER
INSERT INTO TEACHER VALUES 
(1,'ADAM',102),(2,'EVE',102),(3,'FARAH',103),(4,'GEORGE',104),(5,'HANNAH',105);

-- COLLEGE
INSERT INTO COLLEGE VALUES 
(1,'ANIL',78,'PUNE'),(2,'BHUMIKA',93,'MUMBAI'),(3,'CHETAN',85,'MUMBAI'),(4,'DHRUV',96,'DELHI'),
(5,'EMANUEL',12,'DELHI'),(6,'FARAH',82,'DELHI'),(7,'GOPAL',88,'PUNE'),(8,'HEMANT',75,'MUMBAI'),
(9,'INDIRA',66,'DELHI'),(10,'JAY',92,'MUMBAI');

-- STUDENT
INSERT INTO STUDENT VALUES 
(1,'MOHINI',1),(2,'SHISHIR',2),(3,'POOJA',1),(4,'RAHUL',2),(5,'RINA',3),(6,'TOM',1),(7,'RAVI',2);

-- COURSE
INSERT INTO COURSE VALUES 
(1,'Python'),(2,'Data Science'),(3,'SQL'),(4,'Machine Learning');

-- SALES
INSERT INTO SALES VALUES 
(1,1,'Laptop',50000),(2,2,'Mobile',20000),(3,1,'Monitor',15000),(4,3,'Keyboard',5000),(5,2,'Mouse',1500);

-- CUSTOMER
INSERT INTO CUSTOMER VALUES 
(1,'RAJ','MUMBAI'),(2,'RIYA','DELHI'),(3,'AMAN','PUNE'),(4,'SIMRAN','BANGALORE');

-- ========================================
-- BASIC SELECT QUERIES
SELECT * FROM EMPLOYEE;
SELECT NAME FROM EMPLOYEE;
SELECT SALARY FROM EMPLOYEE;
SELECT DISTINCT SALARY FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE SALARY>30000;
SELECT * FROM EMPLOYEE WHERE NAME LIKE 'A%';
SELECT * FROM EMPLOYEE ORDER BY SALARY DESC;
SELECT * FROM EMPLOYEE ORDER BY NAME ASC LIMIT 5;

SELECT * FROM DEPT;
SELECT NAME FROM DEPT;
SELECT COUNT(*) FROM DEPT;

SELECT * FROM TEACHER;
SELECT NAME, DEPT_ID FROM TEACHER;
SELECT COUNT(*) FROM TEACHER;

SELECT * FROM COLLEGE;
SELECT FULL_NAME, MARKS FROM COLLEGE WHERE MARKS>80;
SELECT CITY, COUNT(*) FROM COLLEGE GROUP BY CITY;
SELECT AVG(MARKS) FROM COLLEGE;
SELECT MAX(MARKS), MIN(MARKS) FROM COLLEGE;

SELECT * FROM STUDENT;
SELECT STU_NAME FROM STUDENT WHERE COURSE_ID=1;
SELECT COUNT(*) FROM STUDENT;

SELECT * FROM COURSE;
SELECT COURSE_NAME FROM COURSE;

SELECT * FROM SALES;
SELECT PRODUCT_NAME, AMOUNT FROM SALES WHERE AMOUNT>20000;
SELECT SUM(AMOUNT) FROM SALES;
SELECT AVG(AMOUNT) FROM SALES;

SELECT * FROM CUSTOMER;
SELECT CUSTOMER_NAME FROM CUSTOMER WHERE CITY='MUMBAI';
SELECT COUNT(*) FROM CUSTOMER;

-- ========================================
-- AGGREGATE FUNCTIONS
SELECT COUNT(ID) FROM EMPLOYEE;
SELECT SUM(SALARY) FROM EMPLOYEE;
SELECT AVG(SALARY) FROM EMPLOYEE;
SELECT MAX(SALARY) FROM EMPLOYEE;
SELECT MIN(SALARY) FROM EMPLOYEE;

SELECT COUNT(ROLL_NO) FROM COLLEGE;
SELECT SUM(MARKS) FROM COLLEGE;
SELECT AVG(MARKS) FROM COLLEGE;
SELECT MAX(MARKS) FROM COLLEGE;
SELECT MIN(MARKS) FROM COLLEGE;

SELECT COUNT(STU_ID) FROM STUDENT;

-- ========================================
-- UPDATE QUERIES
UPDATE EMPLOYEE SET SALARY = SALARY + 1000 WHERE ID = 1;
UPDATE EMPLOYEE SET SALARY = SALARY * 1.05;
UPDATE COLLEGE SET MARKS = MARKS + 5 WHERE CITY='DELHI';
UPDATE STUDENT SET STU_NAME='MOHINI PASI' WHERE STU_ID=1;
UPDATE COURSE SET COURSE_NAME='Deep Learning' WHERE COURSE_ID=4;
UPDATE SALES SET AMOUNT=AMOUNT+1000 WHERE ORDER_ID=2;
UPDATE CUSTOMER SET CITY='HYDERABAD' WHERE CUSTOMER_ID=3;
UPDATE TEACHER SET NAME='EVELYN' WHERE ID=2;
UPDATE DEPT SET NAME='HUMAN RESOURCES' WHERE ID=103;

-- ========================================
-- DELETE QUERIES
DELETE FROM EMPLOYEE WHERE SALARY<28000;
DELETE FROM COLLEGE WHERE MARKS<15;
DELETE FROM STUDENT WHERE STU_ID=6;
DELETE FROM COURSE WHERE COURSE_ID=3;
DELETE FROM SALES WHERE AMOUNT<2000;
DELETE FROM CUSTOMER WHERE CUSTOMER_ID=2;
DELETE FROM TEACHER WHERE ID=5;
DELETE FROM DEPT WHERE ID=101;

-- ========================================
-- JOINS

-- INNER JOIN
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E INNER JOIN DEPT D ON E.ID=D.ID;
SELECT S.STU_NAME, C.COURSE_NAME FROM STUDENT S INNER JOIN COURSE C ON S.COURSE_ID=C.COURSE_ID;

-- LEFT JOIN
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E LEFT JOIN DEPT D ON E.ID=D.ID;
SELECT S.STU_NAME, C.COURSE_NAME FROM STUDENT S LEFT JOIN COURSE C ON S.COURSE_ID=C.COURSE_ID;

-- RIGHT JOIN
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E RIGHT JOIN DEPT D ON E.ID=D.ID;

-- FULL JOIN using UNION
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E LEFT JOIN DEPT D ON E.ID=D.ID
UNION
SELECT E.NAME, D.NAME AS DEPT_NAME FROM EMPLOYEE E RIGHT JOIN DEPT D ON E.ID=D.ID;

-- SELF JOIN
SELECT A.NAME AS MANAGER, B.NAME AS EMPLOYEE FROM EMPLOYEE A JOIN EMPLOYEE B ON A.ID=B.ID;

-- UNION
SELECT NAME FROM EMPLOYEE
UNION
SELECT STU_NAME FROM STUDENT;

-- UNION ALL
SELECT NAME FROM EMPLOYEE
UNION ALL
SELECT STU_NAME FROM STUDENT;

-- SUBQUERIES
SELECT NAME FROM EMPLOYEE WHERE SALARY>(SELECT AVG(SALARY) FROM EMPLOYEE);
SELECT STU_NAME FROM STUDENT WHERE COURSE_ID IN (SELECT COURSE_ID FROM COURSE WHERE COURSE_NAME='Python');

-- VIEWS
CREATE VIEW EMP_VIEW AS SELECT NAME, SALARY FROM EMPLOYEE;
SELECT * FROM EMP_VIEW;
DROP VIEW EMP_VIEW;

-- ========================================
-- GROUP BY & HAVING
SELECT CITY, COUNT(*) FROM COLLEGE GROUP BY CITY;
SELECT CITY, AVG(MARKS) FROM COLLEGE GROUP BY CITY HAVING AVG(MARKS)>80;

-- ========================================
-- ORDER BY, LIMIT, DISTINCT
SELECT * FROM EMPLOYEE ORDER BY SALARY DESC LIMIT 3;
SELECT DISTINCT CITY FROM COLLEGE;

-- ========================================
-- ALTER TABLE QUERIES
ALTER TABLE COLLEGE ADD COLUMN AGE INT;
ALTER TABLE COLLEGE DROP COLUMN AGE;
ALTER TABLE COLLEGE RENAME COLUMN FULL_NAME TO NAME;

ALTER TABLE STUDENT ADD COLUMN AGE INT;
ALTER TABLE STUDENT DROP COLUMN AGE;

-- ========================================
-- ADDITIONAL QUERIES TO REACH 400
-- Multiple SELECT variants
SELECT NAME FROM EMPLOYEE WHERE SALARY>30000;
SELECT NAME FROM EMPLOYEE WHERE SALARY BETWEEN 25000 AND 40000;
SELECT NAME FROM EMPLOYEE WHERE NAME LIKE '%A%';
SELECT * FROM COLLEGE WHERE CITY='MUMBAI' AND MARKS>80;
SELECT * FROM COLLEGE WHERE CITY='DELHI' OR MARKS<80;
SELECT FULL_NAME FROM COLLEGE WHERE MARKS IN (78,82,93);
SELECT * FROM STUDENT WHERE COURSE_ID NOT IN (1,2);
SELECT * FROM STUDENT WHERE STU_NAME LIKE 'M%';
SELECT * FROM SALES WHERE AMOUNT>10000 AND PRODUCT_NAME='Laptop';
SELECT * FROM CUSTOMER WHERE CITY='BANGALORE' OR CUSTOMER_NAME='RAJ';

